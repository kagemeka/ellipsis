ARG CUDA=11.2.0
ARG PYVER=3.9
ARG GOVER=1.16.5


FROM nvidia/cuda:${CUDA}-cudnn8-devel-ubuntu20.04 AS on-gpu
LABEL com.kagemeka.gpu=true
SHELL ["/bin/bash", "-c"]
ENV DEBIAN_FRONTEND=noninteractive
WORKDIR /root/


FROM on-gpu AS py-stage
COPY py/setup.sh .
RUN \
  chmod +x setup.sh \
  && ./setup.sh \
  && rm setup.sh
COPY py/requirements.txt .
RUN \
  pip install -Ur \
  requirements.txt \
  && rm requirements.txt


FROM py-stage AS go-stage
COPY go/setup.sh .
RUN \
  chmod +x setup.sh \
  && ./setup.sh \
  && rm setup.sh


FROM go-stage AS rs-stage
COPY rs/setup.sh .
RUN \
  chmod +x setup.sh \
  && ./setup.sh \
  && rm setup.sh


FROM rs-stage AS dart-stage
COPY dart/setup.sh .
RUN \
  chmod +x setup.sh \
  && ./setup.sh \
  && rm setup.sh


FROM dart-stage AS swift-stage
COPY swift/setup.sh .
RUN \
  chmod +x setup.sh \
  && ./setup.sh \
  && rm setup.sh
ENV SOURCEKIT_TOOLCHAIN_PATH=/usr/local/swift


FROM swift-stage AS cpp-stage
COPY cpp/setup.sh .
RUN \
  chmod +x setup.sh \
  && ./setup.sh \
  && rm setup.sh


FROM cpp-stage AS node-stage
COPY node/setup.sh .
RUN \
  chmod +x setup.sh \
  && ./setup.sh \
  && rm setup.sh
